/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, QueryMsg, MigrateMsg, TupleOfUint128AndUint128 } from "./OmxCwPair.types";
export interface OmxCwPairReadOnlyInterface {
  contractAddress: string;
  reserves: () => Promise<TupleOfUint128AndUint128>;
}
export class OmxCwPairQueryClient implements OmxCwPairReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.reserves = this.reserves.bind(this);
  }

  reserves = async (): Promise<TupleOfUint128AndUint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      reserves: {}
    });
  };
}
export interface OmxCwPairInterface extends OmxCwPairReadOnlyInterface {
  contractAddress: string;
  sender: string;
  setReserves: ({
    reserves0,
    reserves1
  }: {
    reserves0: Uint128;
    reserves1: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class OmxCwPairClient extends OmxCwPairQueryClient implements OmxCwPairInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.setReserves = this.setReserves.bind(this);
  }

  setReserves = async ({
    reserves0,
    reserves1
  }: {
    reserves0: Uint128;
    reserves1: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_reserves: {
        reserves0,
        reserves1
      }
    }, fee, memo, _funds);
  };
}