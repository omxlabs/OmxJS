/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Addr, Uint128, SetAdminExec, SetHandlerExec, SetIsGlobalShortDataReadyExec, UpdateGlobalShortDataExec, QueryMsg, NextGlobalShortDataQuery, GlobalShortAveragePricesQuery, GlobalShortDeltaQuery, IsGlobalShortDataReadyQuery, RealisedPnlQuery, MigrateMsg, TupleOfBooleanAndUint128, Boolean, TupleOfUint128AndUint128, Int128 } from "./OmxCwShortsTracker.types";
export interface OmxCwShortsTrackerReadOnlyInterface {
  contractAddress: string;
  nextGlobalShortData: ({
    account,
    collateralToken,
    indexToken,
    isIncrease,
    nextPrice,
    sizeDelta
  }: {
    account: string;
    collateralToken: string;
    indexToken: string;
    isIncrease: boolean;
    nextPrice: Uint128;
    sizeDelta: Uint128;
  }) => Promise<TupleOfUint128AndUint128>;
  globalShortAveragePrices: ({
    token
  }: {
    token: string;
  }) => Promise<Uint128>;
  globalShortDelta: ({
    token
  }: {
    token: string;
  }) => Promise<TupleOfBooleanAndUint128>;
  isGlobalShortDataReady: () => Promise<Boolean>;
  realisedPnl: ({
    account,
    collateralToken,
    indexToken,
    isIncrease,
    nextPrice,
    sizeDelta
  }: {
    account: string;
    collateralToken: string;
    indexToken: string;
    isIncrease: boolean;
    nextPrice: Uint128;
    sizeDelta: Uint128;
  }) => Promise<Int128>;
}
export class OmxCwShortsTrackerQueryClient implements OmxCwShortsTrackerReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.nextGlobalShortData = this.nextGlobalShortData.bind(this);
    this.globalShortAveragePrices = this.globalShortAveragePrices.bind(this);
    this.globalShortDelta = this.globalShortDelta.bind(this);
    this.isGlobalShortDataReady = this.isGlobalShortDataReady.bind(this);
    this.realisedPnl = this.realisedPnl.bind(this);
  }

  nextGlobalShortData = async ({
    account,
    collateralToken,
    indexToken,
    isIncrease,
    nextPrice,
    sizeDelta
  }: {
    account: string;
    collateralToken: string;
    indexToken: string;
    isIncrease: boolean;
    nextPrice: Uint128;
    sizeDelta: Uint128;
  }): Promise<TupleOfUint128AndUint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      next_global_short_data: {
        account,
        collateral_token: collateralToken,
        index_token: indexToken,
        is_increase: isIncrease,
        next_price: nextPrice,
        size_delta: sizeDelta
      }
    });
  };
  globalShortAveragePrices = async ({
    token
  }: {
    token: string;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      global_short_average_prices: {
        token
      }
    });
  };
  globalShortDelta = async ({
    token
  }: {
    token: string;
  }): Promise<TupleOfBooleanAndUint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      global_short_delta: {
        token
      }
    });
  };
  isGlobalShortDataReady = async (): Promise<Boolean> => {
    return this.client.queryContractSmart(this.contractAddress, {
      is_global_short_data_ready: {}
    });
  };
  realisedPnl = async ({
    account,
    collateralToken,
    indexToken,
    isIncrease,
    nextPrice,
    sizeDelta
  }: {
    account: string;
    collateralToken: string;
    indexToken: string;
    isIncrease: boolean;
    nextPrice: Uint128;
    sizeDelta: Uint128;
  }): Promise<Int128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      realised_pnl: {
        account,
        collateral_token: collateralToken,
        index_token: indexToken,
        is_increase: isIncrease,
        next_price: nextPrice,
        size_delta: sizeDelta
      }
    });
  };
}
export interface OmxCwShortsTrackerInterface extends OmxCwShortsTrackerReadOnlyInterface {
  contractAddress: string;
  sender: string;
  setAdmin: ({
    admin
  }: {
    admin: Addr;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setHandler: ({
    account,
    isHandler
  }: {
    account: Addr;
    isHandler: boolean;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setIsGlobalShortDataReady: ({
    value
  }: {
    value: boolean;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateGlobalShortData: ({
    account,
    collateralToken,
    indexToken,
    isIncrease,
    isLong,
    markPrice,
    sizeDelta
  }: {
    account: string;
    collateralToken: string;
    indexToken: string;
    isIncrease: boolean;
    isLong: boolean;
    markPrice: Uint128;
    sizeDelta: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class OmxCwShortsTrackerClient extends OmxCwShortsTrackerQueryClient implements OmxCwShortsTrackerInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.setAdmin = this.setAdmin.bind(this);
    this.setHandler = this.setHandler.bind(this);
    this.setIsGlobalShortDataReady = this.setIsGlobalShortDataReady.bind(this);
    this.updateGlobalShortData = this.updateGlobalShortData.bind(this);
  }

  setAdmin = async ({
    admin
  }: {
    admin: Addr;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_admin: {
        admin
      }
    }, fee, memo, _funds);
  };
  setHandler = async ({
    account,
    isHandler
  }: {
    account: Addr;
    isHandler: boolean;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_handler: {
        account,
        is_handler: isHandler
      }
    }, fee, memo, _funds);
  };
  setIsGlobalShortDataReady = async ({
    value
  }: {
    value: boolean;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_is_global_short_data_ready: {
        value
      }
    }, fee, memo, _funds);
  };
  updateGlobalShortData = async ({
    account,
    collateralToken,
    indexToken,
    isIncrease,
    isLong,
    markPrice,
    sizeDelta
  }: {
    account: string;
    collateralToken: string;
    indexToken: string;
    isIncrease: boolean;
    isLong: boolean;
    markPrice: Uint128;
    sizeDelta: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_global_short_data: {
        account,
        collateral_token: collateralToken,
        index_token: indexToken,
        is_increase: isIncrease,
        is_long: isLong,
        mark_price: markPrice,
        size_delta: sizeDelta
      }
    }, fee, memo, _funds);
  };
}