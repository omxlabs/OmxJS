/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Uint128 = string;
export interface InstantiateMsg {
  admin?: string | null;
  deposit_tokens: string[];
  mint?: MinterResponse | null;
  name: string;
  symbol: string;
  vault: string;
}
export interface MinterResponse {
  cap?: Uint128 | null;
  minter: string;
}
export type ExecuteMsg = {
  initialize: {
    distributor: string;
  };
} | {
  transfer: {
    amount: Uint128;
    recipient: string;
  };
} | {
  burn: {
    amount: Uint128;
  };
} | {
  send: {
    amount: Uint128;
    contract: string;
    msg: Binary;
  };
} | {
  increase_allowance: {
    amount: Uint128;
    expires?: Expiration | null;
    spender: string;
  };
} | {
  decrease_allowance: {
    amount: Uint128;
    expires?: Expiration | null;
    spender: string;
  };
} | {
  transfer_from: {
    amount: Uint128;
    owner: string;
    recipient: string;
  };
} | {
  send_from: {
    amount: Uint128;
    contract: string;
    msg: Binary;
    owner: string;
  };
} | {
  burn_from: {
    amount: Uint128;
    owner: string;
  };
} | {
  mint: {
    amount: Uint128;
    recipient: string;
  };
} | {
  update_minter: {
    new_minter?: string | null;
  };
} | {
  update_marketing: {
    description?: string | null;
    marketing?: string | null;
    project?: string | null;
  };
} | {
  upload_logo: Logo;
} | {
  set_admin: {
    account: string;
  };
} | {
  set_in_private_transfer_mode: {
    value: boolean;
  };
} | {
  set_in_private_claiming_mode: {
    value: boolean;
  };
} | {
  set_in_private_staking_mode: {
    value: boolean;
  };
} | {
  set_handler: {
    account: string;
    is_handler: boolean;
  };
} | {
  set_deposit_token: {
    is_deposit_token: boolean;
    token: string;
  };
} | {
  stake: {
    amount: Uint128;
    deposit_token: string;
  };
} | {
  stake_for_account: {
    account: string;
    amount: Uint128;
    deposit_token: string;
    funding_account: string;
  };
} | {
  unstake: {
    amount: Uint128;
    deposit_token: string;
  };
} | {
  unstake_for_account: {
    account: string;
    amount: Uint128;
    deposit_token: string;
    recipient: string;
  };
} | {
  update_rewards: {};
} | {
  claim: {
    recipient: string;
  };
} | {
  claim_for_account: {
    account: string;
    recipient: string;
  };
};
export type Binary = string;
export type Expiration = {
  at_height: number;
} | {
  at_time: Timestamp;
} | {
  never: {};
};
export type Timestamp = Uint64;
export type Uint64 = string;
export type Logo = {
  url: string;
} | {
  embedded: EmbeddedLogo;
};
export type EmbeddedLogo = {
  svg: Binary;
} | {
  png: Binary;
};
export type QueryMsg = {
  balance: {
    address: string;
  };
} | {
  token_info: {};
} | {
  minter: {};
} | {
  allowance: {
    owner: string;
    spender: string;
  };
} | {
  all_allowances: {
    limit?: number | null;
    owner: string;
    start_after?: string | null;
  };
} | {
  all_spender_allowances: {
    limit?: number | null;
    spender: string;
    start_after?: string | null;
  };
} | {
  all_accounts: {
    limit?: number | null;
    start_after?: string | null;
  };
} | {
  marketing_info: {};
} | {
  download_logo: {};
} | {
  claimable: {
    account: string;
  };
} | {
  deposit_balance: {
    account: string;
    token: string;
  };
} | {
  cumulative_rewards: {
    account: string;
  };
} | {
  average_staked_amount: {
    account: string;
  };
} | {
  total_deposit_supply: {
    token: string;
  };
} | {
  staked_amount: {
    account: string;
  };
} | {
  reward_token: {};
} | {
  initialized: {};
} | {
  is_handler: {
    account: string;
  };
} | {
  is_deposit_token: {
    token: string;
  };
} | {
  reward_tracker_state: {};
};
export interface MigrateMsg {}
export interface AllAccountsResponse {
  accounts: string[];
  [k: string]: unknown;
}
export interface AllAllowancesResponse {
  allowances: AllowanceInfo[];
  [k: string]: unknown;
}
export interface AllowanceInfo {
  allowance: Uint128;
  expires: Expiration;
  spender: string;
}
export interface AllSpenderAllowancesResponse {
  allowances: SpenderAllowanceInfo[];
  [k: string]: unknown;
}
export interface SpenderAllowanceInfo {
  allowance: Uint128;
  expires: Expiration;
  owner: string;
}
export interface AllowanceResponse {
  allowance: Uint128;
  expires: Expiration;
  [k: string]: unknown;
}
export interface BalanceResponse {
  balance: Uint128;
}
export interface DownloadLogoResponse {
  data: Binary;
  mime_type: string;
}
export type Boolean = boolean;
export type LogoInfo = {
  url: string;
} | "embedded";
export type Addr = string;
export interface MarketingInfoResponse {
  description?: string | null;
  logo?: LogoInfo | null;
  marketing?: Addr | null;
  project?: string | null;
  [k: string]: unknown;
}
export interface RewardTrackerInitializedState {
  admin: Addr;
  cumulative_reward_per_token: Uint128;
  distributor: Addr;
  in_private_claiming_mode: boolean;
  in_private_staking_mode: boolean;
  in_private_transfer_mode: boolean;
  vault: Addr;
}
export interface TokenInfoResponse {
  decimals: number;
  name: string;
  symbol: string;
  total_supply: Uint128;
}