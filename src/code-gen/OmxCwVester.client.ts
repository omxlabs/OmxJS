/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, Binary, Logo, EmbeddedLogo, Addr, QueryMsg, AllAccountsResponse, BalanceResponse, DownloadLogoResponse, Timestamp, Uint64, LogoInfo, MarketingInfoResponse, NullableAddr, TokenInfoResponse, VesterState } from "./OmxCwVester.types";
export interface OmxCwVesterReadOnlyInterface {
  contractAddress: string;
  balance: ({
    address
  }: {
    address: string;
  }) => Promise<BalanceResponse>;
  tokenInfo: () => Promise<TokenInfoResponse>;
  allAccounts: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<AllAccountsResponse>;
  marketingInfo: () => Promise<MarketingInfoResponse>;
  downloadLogo: () => Promise<DownloadLogoResponse>;
  claimable: ({
    account
  }: {
    account: string;
  }) => Promise<Uint128>;
  maxVestableAmount: ({
    account
  }: {
    account: string;
  }) => Promise<Uint128>;
  combinedAverageStakedAmount: ({
    account
  }: {
    account: string;
  }) => Promise<Uint128>;
  cumulativeClaimAmount: ({
    account
  }: {
    account: string;
  }) => Promise<Uint128>;
  claimedAmount: ({
    account
  }: {
    account: string;
  }) => Promise<Uint128>;
  pairAmount: ({
    account,
    esAmount
  }: {
    account: string;
    esAmount: Uint128;
  }) => Promise<Uint128>;
  lastVestingTime: ({
    account
  }: {
    account: string;
  }) => Promise<Timestamp>;
  rawPairAmount: ({
    account
  }: {
    account: string;
  }) => Promise<Uint128>;
  rewardTracker: () => Promise<NullableAddr>;
  totalVested: ({
    account
  }: {
    account: string;
  }) => Promise<Uint128>;
  vestedAmount: ({
    account
  }: {
    account: string;
  }) => Promise<Uint128>;
  vesterState: () => Promise<VesterState>;
  transferredAverageStakedAmount: ({
    account
  }: {
    account: string;
  }) => Promise<Uint128>;
  transferredCumulativeReward: ({
    account
  }: {
    account: string;
  }) => Promise<Uint128>;
  cumulativeRewardDeduction: ({
    account
  }: {
    account: string;
  }) => Promise<Uint128>;
  bonusReward: ({
    account
  }: {
    account: string;
  }) => Promise<Uint128>;
}
export class OmxCwVesterQueryClient implements OmxCwVesterReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.balance = this.balance.bind(this);
    this.tokenInfo = this.tokenInfo.bind(this);
    this.allAccounts = this.allAccounts.bind(this);
    this.marketingInfo = this.marketingInfo.bind(this);
    this.downloadLogo = this.downloadLogo.bind(this);
    this.claimable = this.claimable.bind(this);
    this.maxVestableAmount = this.maxVestableAmount.bind(this);
    this.combinedAverageStakedAmount = this.combinedAverageStakedAmount.bind(this);
    this.cumulativeClaimAmount = this.cumulativeClaimAmount.bind(this);
    this.claimedAmount = this.claimedAmount.bind(this);
    this.pairAmount = this.pairAmount.bind(this);
    this.lastVestingTime = this.lastVestingTime.bind(this);
    this.rawPairAmount = this.rawPairAmount.bind(this);
    this.rewardTracker = this.rewardTracker.bind(this);
    this.totalVested = this.totalVested.bind(this);
    this.vestedAmount = this.vestedAmount.bind(this);
    this.vesterState = this.vesterState.bind(this);
    this.transferredAverageStakedAmount = this.transferredAverageStakedAmount.bind(this);
    this.transferredCumulativeReward = this.transferredCumulativeReward.bind(this);
    this.cumulativeRewardDeduction = this.cumulativeRewardDeduction.bind(this);
    this.bonusReward = this.bonusReward.bind(this);
  }

  balance = async ({
    address
  }: {
    address: string;
  }): Promise<BalanceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      balance: {
        address
      }
    });
  };
  tokenInfo = async (): Promise<TokenInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      token_info: {}
    });
  };
  allAccounts = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<AllAccountsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_accounts: {
        limit,
        start_after: startAfter
      }
    });
  };
  marketingInfo = async (): Promise<MarketingInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      marketing_info: {}
    });
  };
  downloadLogo = async (): Promise<DownloadLogoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      download_logo: {}
    });
  };
  claimable = async ({
    account
  }: {
    account: string;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      claimable: {
        account
      }
    });
  };
  maxVestableAmount = async ({
    account
  }: {
    account: string;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      max_vestable_amount: {
        account
      }
    });
  };
  combinedAverageStakedAmount = async ({
    account
  }: {
    account: string;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      combined_average_staked_amount: {
        account
      }
    });
  };
  cumulativeClaimAmount = async ({
    account
  }: {
    account: string;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      cumulative_claim_amount: {
        account
      }
    });
  };
  claimedAmount = async ({
    account
  }: {
    account: string;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      claimed_amount: {
        account
      }
    });
  };
  pairAmount = async ({
    account,
    esAmount
  }: {
    account: string;
    esAmount: Uint128;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pair_amount: {
        account,
        es_amount: esAmount
      }
    });
  };
  lastVestingTime = async ({
    account
  }: {
    account: string;
  }): Promise<Timestamp> => {
    return this.client.queryContractSmart(this.contractAddress, {
      last_vesting_time: {
        account
      }
    });
  };
  rawPairAmount = async ({
    account
  }: {
    account: string;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      raw_pair_amount: {
        account
      }
    });
  };
  rewardTracker = async (): Promise<NullableAddr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      reward_tracker: {}
    });
  };
  totalVested = async ({
    account
  }: {
    account: string;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      total_vested: {
        account
      }
    });
  };
  vestedAmount = async ({
    account
  }: {
    account: string;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      vested_amount: {
        account
      }
    });
  };
  vesterState = async (): Promise<VesterState> => {
    return this.client.queryContractSmart(this.contractAddress, {
      vester_state: {}
    });
  };
  transferredAverageStakedAmount = async ({
    account
  }: {
    account: string;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      transferred_average_staked_amount: {
        account
      }
    });
  };
  transferredCumulativeReward = async ({
    account
  }: {
    account: string;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      transferred_cumulative_reward: {
        account
      }
    });
  };
  cumulativeRewardDeduction = async ({
    account
  }: {
    account: string;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      cumulative_reward_deduction: {
        account
      }
    });
  };
  bonusReward = async ({
    account
  }: {
    account: string;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      bonus_reward: {
        account
      }
    });
  };
}
export interface OmxCwVesterInterface extends OmxCwVesterReadOnlyInterface {
  contractAddress: string;
  sender: string;
  burn: ({
    amount
  }: {
    amount: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  sendFrom: ({
    amount,
    contract,
    msg,
    owner
  }: {
    amount: Uint128;
    contract: string;
    msg: Binary;
    owner: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  burnFrom: ({
    amount,
    owner
  }: {
    amount: Uint128;
    owner: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateMarketing: ({
    description,
    marketing,
    project
  }: {
    description?: string;
    marketing?: string;
    project?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  uploadLogo: (logo: Logo, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  addAdmin: ({
    account
  }: {
    account: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  removeAdmin: ({
    account
  }: {
    account: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setHasMaxVestableAmount: ({
    value
  }: {
    value: boolean;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setHandler: ({
    account,
    isHandler
  }: {
    account: string;
    isHandler: boolean;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  deposit: ({
    amount
  }: {
    amount: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  depositCb: ({
    account,
    amount
  }: {
    account: Addr;
    amount: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  depositForAccount: ({
    account,
    amount
  }: {
    account: string;
    amount: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  claim: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  claimForAccount: ({
    account,
    recipient
  }: {
    account: string;
    recipient: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  withdraw: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  transferStakeValues: ({
    recipient,
    sender
  }: {
    recipient: string;
    sender: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setTransferredAverageStakedAmounts: ({
    account,
    amount
  }: {
    account: string;
    amount: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setTransferredCumulativeRewards: ({
    account,
    amount
  }: {
    account: string;
    amount: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setCumulativeRewardDeductions: ({
    account,
    amount
  }: {
    account: string;
    amount: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setBonusRewards: ({
    account,
    amount
  }: {
    account: string;
    amount: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class OmxCwVesterClient extends OmxCwVesterQueryClient implements OmxCwVesterInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.burn = this.burn.bind(this);
    this.sendFrom = this.sendFrom.bind(this);
    this.burnFrom = this.burnFrom.bind(this);
    this.updateMarketing = this.updateMarketing.bind(this);
    this.uploadLogo = this.uploadLogo.bind(this);
    this.addAdmin = this.addAdmin.bind(this);
    this.removeAdmin = this.removeAdmin.bind(this);
    this.setHasMaxVestableAmount = this.setHasMaxVestableAmount.bind(this);
    this.setHandler = this.setHandler.bind(this);
    this.deposit = this.deposit.bind(this);
    this.depositCb = this.depositCb.bind(this);
    this.depositForAccount = this.depositForAccount.bind(this);
    this.claim = this.claim.bind(this);
    this.claimForAccount = this.claimForAccount.bind(this);
    this.withdraw = this.withdraw.bind(this);
    this.transferStakeValues = this.transferStakeValues.bind(this);
    this.setTransferredAverageStakedAmounts = this.setTransferredAverageStakedAmounts.bind(this);
    this.setTransferredCumulativeRewards = this.setTransferredCumulativeRewards.bind(this);
    this.setCumulativeRewardDeductions = this.setCumulativeRewardDeductions.bind(this);
    this.setBonusRewards = this.setBonusRewards.bind(this);
  }

  burn = async ({
    amount
  }: {
    amount: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      burn: {
        amount
      }
    }, fee, memo, _funds);
  };
  sendFrom = async ({
    amount,
    contract,
    msg,
    owner
  }: {
    amount: Uint128;
    contract: string;
    msg: Binary;
    owner: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      send_from: {
        amount,
        contract,
        msg,
        owner
      }
    }, fee, memo, _funds);
  };
  burnFrom = async ({
    amount,
    owner
  }: {
    amount: Uint128;
    owner: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      burn_from: {
        amount,
        owner
      }
    }, fee, memo, _funds);
  };
  updateMarketing = async ({
    description,
    marketing,
    project
  }: {
    description?: string;
    marketing?: string;
    project?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_marketing: {
        description,
        marketing,
        project
      }
    }, fee, memo, _funds);
  };
  uploadLogo = async (logo: Logo, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      upload_logo: logo
    }, fee, memo, _funds);
  };
  addAdmin = async ({
    account
  }: {
    account: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_admin: {
        account
      }
    }, fee, memo, _funds);
  };
  removeAdmin = async ({
    account
  }: {
    account: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_admin: {
        account
      }
    }, fee, memo, _funds);
  };
  setHasMaxVestableAmount = async ({
    value
  }: {
    value: boolean;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_has_max_vestable_amount: {
        value
      }
    }, fee, memo, _funds);
  };
  setHandler = async ({
    account,
    isHandler
  }: {
    account: string;
    isHandler: boolean;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_handler: {
        account,
        is_handler: isHandler
      }
    }, fee, memo, _funds);
  };
  deposit = async ({
    amount
  }: {
    amount: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      deposit: {
        amount
      }
    }, fee, memo, _funds);
  };
  depositCb = async ({
    account,
    amount
  }: {
    account: Addr;
    amount: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      deposit_cb: {
        account,
        amount
      }
    }, fee, memo, _funds);
  };
  depositForAccount = async ({
    account,
    amount
  }: {
    account: string;
    amount: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      deposit_for_account: {
        account,
        amount
      }
    }, fee, memo, _funds);
  };
  claim = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim: {}
    }, fee, memo, _funds);
  };
  claimForAccount = async ({
    account,
    recipient
  }: {
    account: string;
    recipient: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_for_account: {
        account,
        recipient
      }
    }, fee, memo, _funds);
  };
  withdraw = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw: {}
    }, fee, memo, _funds);
  };
  transferStakeValues = async ({
    recipient,
    sender
  }: {
    recipient: string;
    sender: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      transfer_stake_values: {
        recipient,
        sender
      }
    }, fee, memo, _funds);
  };
  setTransferredAverageStakedAmounts = async ({
    account,
    amount
  }: {
    account: string;
    amount: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_transferred_average_staked_amounts: {
        account,
        amount
      }
    }, fee, memo, _funds);
  };
  setTransferredCumulativeRewards = async ({
    account,
    amount
  }: {
    account: string;
    amount: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_transferred_cumulative_rewards: {
        account,
        amount
      }
    }, fee, memo, _funds);
  };
  setCumulativeRewardDeductions = async ({
    account,
    amount
  }: {
    account: string;
    amount: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_cumulative_reward_deductions: {
        account,
        amount
      }
    }, fee, memo, _funds);
  };
  setBonusRewards = async ({
    account,
    amount
  }: {
    account: string;
    amount: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_bonus_rewards: {
        account,
        amount
      }
    }, fee, memo, _funds);
  };
}