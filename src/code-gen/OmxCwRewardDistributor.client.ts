/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, SetAdminExec, UpdateLastDistributionTimeExec, SetTokensPerIntervalExec, DistributeExec, QueryMsg, AdminQuery, RewardTokenQuery, TokenPerIntervalQuery, PendingRewardsQuery, MigrateMsg, Addr } from "./OmxCwRewardDistributor.types";
export interface OmxCwRewardDistributorReadOnlyInterface {
  contractAddress: string;
  admin: () => Promise<Addr>;
  rewardToken: () => Promise<Addr>;
  tokenPerInterval: () => Promise<Uint128>;
  pendingRewards: () => Promise<Uint128>;
}
export class OmxCwRewardDistributorQueryClient implements OmxCwRewardDistributorReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.admin = this.admin.bind(this);
    this.rewardToken = this.rewardToken.bind(this);
    this.tokenPerInterval = this.tokenPerInterval.bind(this);
    this.pendingRewards = this.pendingRewards.bind(this);
  }

  admin = async (): Promise<Addr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      admin: {}
    });
  };
  rewardToken = async (): Promise<Addr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      reward_token: {}
    });
  };
  tokenPerInterval = async (): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      token_per_interval: {}
    });
  };
  pendingRewards = async (): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pending_rewards: {}
    });
  };
}
export interface OmxCwRewardDistributorInterface extends OmxCwRewardDistributorReadOnlyInterface {
  contractAddress: string;
  sender: string;
  setAdmin: ({
    admin
  }: {
    admin: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateLastDistributionTime: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setTokensPerInterval: ({
    amount
  }: {
    amount: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  distribute: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class OmxCwRewardDistributorClient extends OmxCwRewardDistributorQueryClient implements OmxCwRewardDistributorInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.setAdmin = this.setAdmin.bind(this);
    this.updateLastDistributionTime = this.updateLastDistributionTime.bind(this);
    this.setTokensPerInterval = this.setTokensPerInterval.bind(this);
    this.distribute = this.distribute.bind(this);
  }

  setAdmin = async ({
    admin
  }: {
    admin: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_admin: {
        admin
      }
    }, fee, memo, _funds);
  };
  updateLastDistributionTime = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_last_distribution_time: {}
    }, fee, memo, _funds);
  };
  setTokensPerInterval = async ({
    amount
  }: {
    amount: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_tokens_per_interval: {
        amount
      }
    }, fee, memo, _funds);
  };
  distribute = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      distribute: {}
    }, fee, memo, _funds);
  };
}