/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Addr, SetAdminExec, SetTokenConfigExec, SetPriceSampleSpaceExec, QueryMsg, PriceQuery, Uint128 } from "./OmxCwVaultPriceFeed.types";
export interface OmxCwVaultPriceFeedReadOnlyInterface {
  contractAddress: string;
  price: ({
    includeAmmPrice,
    maximize,
    token
  }: {
    includeAmmPrice: boolean;
    maximize: boolean;
    token: string;
  }) => Promise<Uint128>;
}
export class OmxCwVaultPriceFeedQueryClient implements OmxCwVaultPriceFeedReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.price = this.price.bind(this);
  }

  price = async ({
    includeAmmPrice,
    maximize,
    token
  }: {
    includeAmmPrice: boolean;
    maximize: boolean;
    token: string;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      price: {
        include_amm_price: includeAmmPrice,
        maximize,
        token
      }
    });
  };
}
export interface OmxCwVaultPriceFeedInterface extends OmxCwVaultPriceFeedReadOnlyInterface {
  contractAddress: string;
  sender: string;
  setAdmin: ({
    admin
  }: {
    admin: Addr;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setTokenConfig: ({
    isStrictStable,
    priceDecimals,
    priceFeed,
    token
  }: {
    isStrictStable: boolean;
    priceDecimals: number;
    priceFeed: string;
    token: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setPriceSampleSpace: ({
    value
  }: {
    value: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class OmxCwVaultPriceFeedClient extends OmxCwVaultPriceFeedQueryClient implements OmxCwVaultPriceFeedInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.setAdmin = this.setAdmin.bind(this);
    this.setTokenConfig = this.setTokenConfig.bind(this);
    this.setPriceSampleSpace = this.setPriceSampleSpace.bind(this);
  }

  setAdmin = async ({
    admin
  }: {
    admin: Addr;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_admin: {
        admin
      }
    }, fee, memo, _funds);
  };
  setTokenConfig = async ({
    isStrictStable,
    priceDecimals,
    priceFeed,
    token
  }: {
    isStrictStable: boolean;
    priceDecimals: number;
    priceFeed: string;
    token: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_token_config: {
        is_strict_stable: isStrictStable,
        price_decimals: priceDecimals,
        price_feed: priceFeed,
        token
      }
    }, fee, memo, _funds);
  };
  setPriceSampleSpace = async ({
    value
  }: {
    value: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_price_sample_space: {
        value
      }
    }, fee, memo, _funds);
  };
}