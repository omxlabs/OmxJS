/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, SetAdminArgs, SetLatestAnswerArgs, Answer, QueryMsg, LatestRoundMsg, LatestAnswerMsg, RoundDataMsg, Timestamp, Uint64, GetRoundDataResult } from "./OmxCwPriceFeed.types";
export interface OmxCwPriceFeedReadOnlyInterface {
  contractAddress: string;
  latestRound: () => Promise<Uint128>;
  latestAnswer: () => Promise<Answer>;
  roundData: ({
    roundId
  }: {
    roundId: Uint128;
  }) => Promise<GetRoundDataResult>;
}
export class OmxCwPriceFeedQueryClient implements OmxCwPriceFeedReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.latestRound = this.latestRound.bind(this);
    this.latestAnswer = this.latestAnswer.bind(this);
    this.roundData = this.roundData.bind(this);
  }

  latestRound = async (): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      latest_round: {}
    });
  };
  latestAnswer = async (): Promise<Answer> => {
    return this.client.queryContractSmart(this.contractAddress, {
      latest_answer: {}
    });
  };
  roundData = async ({
    roundId
  }: {
    roundId: Uint128;
  }): Promise<GetRoundDataResult> => {
    return this.client.queryContractSmart(this.contractAddress, {
      round_data: {
        round_id: roundId
      }
    });
  };
}
export interface OmxCwPriceFeedInterface extends OmxCwPriceFeedReadOnlyInterface {
  contractAddress: string;
  sender: string;
  setAdmin: ({
    admin,
    value
  }: {
    admin?: string;
    value: boolean;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setLatestAnswer: ({
    answer
  }: {
    answer: Answer;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class OmxCwPriceFeedClient extends OmxCwPriceFeedQueryClient implements OmxCwPriceFeedInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.setAdmin = this.setAdmin.bind(this);
    this.setLatestAnswer = this.setLatestAnswer.bind(this);
  }

  setAdmin = async ({
    admin,
    value
  }: {
    admin?: string;
    value: boolean;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_admin: {
        admin,
        value
      }
    }, fee, memo, _funds);
  };
  setLatestAnswer = async ({
    answer
  }: {
    answer: Answer;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_latest_answer: {
        answer
      }
    }, fee, memo, _funds);
  };
}