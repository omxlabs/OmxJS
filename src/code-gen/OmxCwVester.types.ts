/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export interface InstantiateMsg {
  claimable_token: string;
  es_token: string;
  name: string;
  pair_token?: string | null;
  reward_tracker?: string | null;
  symbol: string;
  vesting_duration_sec: number;
}
export type ExecuteMsg = {
  burn: {
    amount: Uint128;
  };
} | {
  send_from: {
    amount: Uint128;
    contract: string;
    msg: Binary;
    owner: string;
  };
} | {
  burn_from: {
    amount: Uint128;
    owner: string;
  };
} | {
  update_marketing: {
    description?: string | null;
    marketing?: string | null;
    project?: string | null;
  };
} | {
  upload_logo: Logo;
} | {
  add_admin: {
    account: string;
  };
} | {
  remove_admin: {
    account: string;
  };
} | {
  set_has_max_vestable_amount: {
    value: boolean;
  };
} | {
  set_handler: {
    account: string;
    is_handler: boolean;
  };
} | {
  deposit: {
    amount: Uint128;
  };
} | {
  deposit_cb: {
    account: Addr;
    amount: Uint128;
  };
} | {
  deposit_for_account: {
    account: string;
    amount: Uint128;
  };
} | {
  claim: {};
} | {
  claim_for_account: {
    account: string;
    recipient: string;
  };
} | {
  withdraw: {};
} | {
  transfer_stake_values: {
    recipient: string;
    sender: string;
  };
} | {
  set_transferred_average_staked_amounts: {
    account: string;
    amount: Uint128;
  };
} | {
  set_transferred_cumulative_rewards: {
    account: string;
    amount: Uint128;
  };
} | {
  set_cumulative_reward_deductions: {
    account: string;
    amount: Uint128;
  };
} | {
  set_bonus_rewards: {
    account: string;
    amount: Uint128;
  };
};
export type Uint128 = string;
export type Binary = string;
export type Logo = {
  url: string;
} | {
  embedded: EmbeddedLogo;
};
export type EmbeddedLogo = {
  svg: Binary;
} | {
  png: Binary;
};
export type Addr = string;
export type QueryMsg = {
  balance: {
    address: string;
  };
} | {
  token_info: {};
} | {
  all_accounts: {
    limit?: number | null;
    start_after?: string | null;
  };
} | {
  marketing_info: {};
} | {
  download_logo: {};
} | {
  claimable: {
    account: string;
  };
} | {
  max_vestable_amount: {
    account: string;
  };
} | {
  combined_average_staked_amount: {
    account: string;
  };
} | {
  cumulative_claim_amount: {
    account: string;
  };
} | {
  claimed_amount: {
    account: string;
  };
} | {
  pair_amount: {
    account: string;
    es_amount: Uint128;
  };
} | {
  last_vesting_time: {
    account: string;
  };
} | {
  raw_pair_amount: {
    account: string;
  };
} | {
  reward_tracker: {};
} | {
  total_vested: {
    account: string;
  };
} | {
  vested_amount: {
    account: string;
  };
} | {
  vester_state: {};
} | {
  transferred_average_staked_amount: {
    account: string;
  };
} | {
  transferred_cumulative_reward: {
    account: string;
  };
} | {
  cumulative_reward_deduction: {
    account: string;
  };
} | {
  bonus_reward: {
    account: string;
  };
};
export interface AllAccountsResponse {
  accounts: string[];
  [k: string]: unknown;
}
export interface BalanceResponse {
  balance: Uint128;
}
export interface DownloadLogoResponse {
  data: Binary;
  mime_type: string;
}
export type Timestamp = Uint64;
export type Uint64 = string;
export type LogoInfo = {
  url: string;
} | "embedded";
export interface MarketingInfoResponse {
  description?: string | null;
  logo?: LogoInfo | null;
  marketing?: Addr | null;
  project?: string | null;
  [k: string]: unknown;
}
export type NullableAddr = Addr | null;
export interface TokenInfoResponse {
  decimals: number;
  name: string;
  symbol: string;
  total_supply: Uint128;
}
export interface VesterState {
  claimable_token: Addr;
  es_token: Addr;
  has_max_vestable_amount: boolean;
  pair_supply: Uint128;
  pair_token?: Addr | null;
  reward_tracker?: Addr | null;
  vesting_duration_sec: number;
}